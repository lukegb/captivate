// Code generated by protoc-gen-go. DO NOT EDIT.
// source: macvland.proto

package captivated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListInterfacesRequest struct {
}

func (m *ListInterfacesRequest) Reset()                    { *m = ListInterfacesRequest{} }
func (m *ListInterfacesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListInterfacesRequest) ProtoMessage()               {}
func (*ListInterfacesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ListInterfacesReply struct {
	Interfaces []*ListInterfacesReply_Interface `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *ListInterfacesReply) Reset()                    { *m = ListInterfacesReply{} }
func (m *ListInterfacesReply) String() string            { return proto.CompactTextString(m) }
func (*ListInterfacesReply) ProtoMessage()               {}
func (*ListInterfacesReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListInterfacesReply) GetInterfaces() []*ListInterfacesReply_Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type ListInterfacesReply_Interface struct {
	Interface string `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
}

func (m *ListInterfacesReply_Interface) Reset()         { *m = ListInterfacesReply_Interface{} }
func (m *ListInterfacesReply_Interface) String() string { return proto.CompactTextString(m) }
func (*ListInterfacesReply_Interface) ProtoMessage()    {}
func (*ListInterfacesReply_Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

func (m *ListInterfacesReply_Interface) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

type ListMACsRequest struct {
}

func (m *ListMACsRequest) Reset()                    { *m = ListMACsRequest{} }
func (m *ListMACsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMACsRequest) ProtoMessage()               {}
func (*ListMACsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ListMACsReply struct {
	Macs []*ListMACsReply_MAC `protobuf:"bytes,1,rep,name=macs" json:"macs,omitempty"`
}

func (m *ListMACsReply) Reset()                    { *m = ListMACsReply{} }
func (m *ListMACsReply) String() string            { return proto.CompactTextString(m) }
func (*ListMACsReply) ProtoMessage()               {}
func (*ListMACsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ListMACsReply) GetMacs() []*ListMACsReply_MAC {
	if m != nil {
		return m.Macs
	}
	return nil
}

type ListMACsReply_MAC struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
}

func (m *ListMACsReply_MAC) Reset()                    { *m = ListMACsReply_MAC{} }
func (m *ListMACsReply_MAC) String() string            { return proto.CompactTextString(m) }
func (*ListMACsReply_MAC) ProtoMessage()               {}
func (*ListMACsReply_MAC) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

func (m *ListMACsReply_MAC) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type GetInterfaceRequest struct {
	Interface string `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
}

func (m *GetInterfaceRequest) Reset()                    { *m = GetInterfaceRequest{} }
func (m *GetInterfaceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInterfaceRequest) ProtoMessage()               {}
func (*GetInterfaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetInterfaceRequest) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

type GetInterfaceReply struct {
	Interface     string   `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	AuthorisedMac []string `protobuf:"bytes,2,rep,name=authorised_mac,json=authorisedMac" json:"authorised_mac,omitempty"`
}

func (m *GetInterfaceReply) Reset()                    { *m = GetInterfaceReply{} }
func (m *GetInterfaceReply) String() string            { return proto.CompactTextString(m) }
func (*GetInterfaceReply) ProtoMessage()               {}
func (*GetInterfaceReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetInterfaceReply) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *GetInterfaceReply) GetAuthorisedMac() []string {
	if m != nil {
		return m.AuthorisedMac
	}
	return nil
}

type AuthoriseRequest struct {
	Interface string `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	Mac       string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
}

func (m *AuthoriseRequest) Reset()                    { *m = AuthoriseRequest{} }
func (m *AuthoriseRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthoriseRequest) ProtoMessage()               {}
func (*AuthoriseRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *AuthoriseRequest) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *AuthoriseRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type AuthoriseReply struct {
	Interface string `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	Mac       string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
}

func (m *AuthoriseReply) Reset()                    { *m = AuthoriseReply{} }
func (m *AuthoriseReply) String() string            { return proto.CompactTextString(m) }
func (*AuthoriseReply) ProtoMessage()               {}
func (*AuthoriseReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *AuthoriseReply) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *AuthoriseReply) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func init() {
	proto.RegisterType((*ListInterfacesRequest)(nil), "captivated.ListInterfacesRequest")
	proto.RegisterType((*ListInterfacesReply)(nil), "captivated.ListInterfacesReply")
	proto.RegisterType((*ListInterfacesReply_Interface)(nil), "captivated.ListInterfacesReply.Interface")
	proto.RegisterType((*ListMACsRequest)(nil), "captivated.ListMACsRequest")
	proto.RegisterType((*ListMACsReply)(nil), "captivated.ListMACsReply")
	proto.RegisterType((*ListMACsReply_MAC)(nil), "captivated.ListMACsReply.MAC")
	proto.RegisterType((*GetInterfaceRequest)(nil), "captivated.GetInterfaceRequest")
	proto.RegisterType((*GetInterfaceReply)(nil), "captivated.GetInterfaceReply")
	proto.RegisterType((*AuthoriseRequest)(nil), "captivated.AuthoriseRequest")
	proto.RegisterType((*AuthoriseReply)(nil), "captivated.AuthoriseReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MACVLAN service

type MACVLANClient interface {
	// Gets the list of known interfaces.
	ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesReply, error)
	// Gets the list of known MACs.
	ListMACs(ctx context.Context, in *ListMACsRequest, opts ...grpc.CallOption) (*ListMACsReply, error)
	// Gets the list of authorised MACs for a given interface.
	GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceReply, error)
	// Authorises a MAC for a given interface.
	Authorise(ctx context.Context, in *AuthoriseRequest, opts ...grpc.CallOption) (*AuthoriseReply, error)
}

type mACVLANClient struct {
	cc *grpc.ClientConn
}

func NewMACVLANClient(cc *grpc.ClientConn) MACVLANClient {
	return &mACVLANClient{cc}
}

func (c *mACVLANClient) ListInterfaces(ctx context.Context, in *ListInterfacesRequest, opts ...grpc.CallOption) (*ListInterfacesReply, error) {
	out := new(ListInterfacesReply)
	err := grpc.Invoke(ctx, "/captivated.MACVLAN/ListInterfaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mACVLANClient) ListMACs(ctx context.Context, in *ListMACsRequest, opts ...grpc.CallOption) (*ListMACsReply, error) {
	out := new(ListMACsReply)
	err := grpc.Invoke(ctx, "/captivated.MACVLAN/ListMACs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mACVLANClient) GetInterface(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceReply, error) {
	out := new(GetInterfaceReply)
	err := grpc.Invoke(ctx, "/captivated.MACVLAN/GetInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mACVLANClient) Authorise(ctx context.Context, in *AuthoriseRequest, opts ...grpc.CallOption) (*AuthoriseReply, error) {
	out := new(AuthoriseReply)
	err := grpc.Invoke(ctx, "/captivated.MACVLAN/Authorise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MACVLAN service

type MACVLANServer interface {
	// Gets the list of known interfaces.
	ListInterfaces(context.Context, *ListInterfacesRequest) (*ListInterfacesReply, error)
	// Gets the list of known MACs.
	ListMACs(context.Context, *ListMACsRequest) (*ListMACsReply, error)
	// Gets the list of authorised MACs for a given interface.
	GetInterface(context.Context, *GetInterfaceRequest) (*GetInterfaceReply, error)
	// Authorises a MAC for a given interface.
	Authorise(context.Context, *AuthoriseRequest) (*AuthoriseReply, error)
}

func RegisterMACVLANServer(s *grpc.Server, srv MACVLANServer) {
	s.RegisterService(&_MACVLAN_serviceDesc, srv)
}

func _MACVLAN_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MACVLANServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captivated.MACVLAN/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MACVLANServer).ListInterfaces(ctx, req.(*ListInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MACVLAN_ListMACs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMACsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MACVLANServer).ListMACs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captivated.MACVLAN/ListMACs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MACVLANServer).ListMACs(ctx, req.(*ListMACsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MACVLAN_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MACVLANServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captivated.MACVLAN/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MACVLANServer).GetInterface(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MACVLAN_Authorise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthoriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MACVLANServer).Authorise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/captivated.MACVLAN/Authorise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MACVLANServer).Authorise(ctx, req.(*AuthoriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MACVLAN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "captivated.MACVLAN",
	HandlerType: (*MACVLANServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInterfaces",
			Handler:    _MACVLAN_ListInterfaces_Handler,
		},
		{
			MethodName: "ListMACs",
			Handler:    _MACVLAN_ListMACs_Handler,
		},
		{
			MethodName: "GetInterface",
			Handler:    _MACVLAN_GetInterface_Handler,
		},
		{
			MethodName: "Authorise",
			Handler:    _MACVLAN_Authorise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "macvland.proto",
}

func init() { proto.RegisterFile("macvland.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdd, 0x4e, 0xc2, 0x40,
	0x10, 0x85, 0x29, 0x35, 0x6a, 0x47, 0xa9, 0x30, 0xc4, 0x80, 0x15, 0x22, 0x6e, 0x62, 0x02, 0x37,
	0x4d, 0x84, 0x17, 0xb0, 0xd6, 0x84, 0x90, 0x50, 0x63, 0x7a, 0x41, 0x4c, 0xbc, 0x30, 0xeb, 0xb2,
	0xc6, 0x26, 0xfc, 0x49, 0x17, 0x12, 0x9f, 0xc1, 0xb7, 0xf2, 0xc9, 0x4c, 0x0b, 0xdd, 0x2d, 0xc8,
	0x8f, 0x77, 0xed, 0x99, 0x99, 0xb3, 0xdf, 0xf4, 0x6c, 0xc1, 0x1c, 0x52, 0x36, 0x1f, 0xd0, 0x51,
	0xdf, 0x9e, 0x4c, 0xc7, 0x62, 0x8c, 0xc0, 0xe8, 0x44, 0x04, 0x73, 0x2a, 0x78, 0x9f, 0x94, 0xe0,
	0xbc, 0x1b, 0x84, 0xa2, 0x33, 0x12, 0x7c, 0xfa, 0x4e, 0x19, 0x0f, 0x7d, 0xfe, 0x39, 0xe3, 0xa1,
	0x20, 0xdf, 0x1a, 0x14, 0xd7, 0x2b, 0x93, 0xc1, 0x17, 0x76, 0x00, 0x02, 0x29, 0x95, 0xb5, 0x9a,
	0x5e, 0x3f, 0x69, 0x36, 0x6c, 0xe5, 0x68, 0x6f, 0x18, 0xb2, 0xe5, 0xbb, 0x9f, 0x1a, 0xb6, 0x1a,
	0x60, 0xc8, 0x02, 0x56, 0xc0, 0x90, 0xa5, 0xb2, 0x56, 0xd3, 0xea, 0x86, 0xaf, 0x04, 0x52, 0x80,
	0xb3, 0xc8, 0xd7, 0x73, 0x5c, 0x09, 0xf8, 0x02, 0x39, 0x25, 0x45, 0x64, 0xb7, 0x70, 0x30, 0xa4,
	0x2c, 0x61, 0xaa, 0xae, 0x33, 0xc9, 0x46, 0xdb, 0x73, 0x5c, 0x3f, 0x6e, 0xb5, 0x4a, 0xa0, 0x7b,
	0x8e, 0x8b, 0x79, 0xd0, 0x87, 0x94, 0x2d, 0x4f, 0x8d, 0x1e, 0x49, 0x0b, 0x8a, 0x6d, 0xae, 0xd6,
	0x58, 0x9e, 0xb9, 0x07, 0xf2, 0x19, 0x0a, 0xab, 0x43, 0x11, 0xd5, 0xce, 0x11, 0xbc, 0x01, 0x93,
	0xce, 0xc4, 0xc7, 0x78, 0x1a, 0x84, 0xbc, 0xff, 0x1a, 0x41, 0x64, 0x6b, 0x7a, 0xdd, 0xf0, 0x73,
	0x4a, 0xf5, 0x28, 0x23, 0xf7, 0x90, 0x77, 0x12, 0xe1, 0x5f, 0x2c, 0xc9, 0x4a, 0x59, 0xb5, 0xd2,
	0x1d, 0x98, 0x29, 0x8f, 0xfd, 0x68, 0x7f, 0x1c, 0x9a, 0x3f, 0x59, 0x38, 0xf2, 0x1c, 0xb7, 0xd7,
	0x75, 0x1e, 0xb1, 0x07, 0xe6, 0x6a, 0xd0, 0x78, 0xbd, 0xeb, 0x12, 0xc4, 0xc8, 0xd6, 0xd5, 0x9e,
	0x7b, 0x42, 0x32, 0xf8, 0x00, 0xc7, 0x49, 0x58, 0x78, 0xb9, 0x39, 0xc2, 0x85, 0xd7, 0xc5, 0xd6,
	0x7c, 0x49, 0x06, 0x9f, 0xe0, 0x34, 0x9d, 0x04, 0xae, 0x1c, 0xbc, 0x21, 0x58, 0xab, 0xba, 0xbd,
	0x61, 0xe1, 0xd8, 0x06, 0x43, 0x7e, 0x3d, 0xac, 0xa4, 0xbb, 0xd7, 0x83, 0xb1, 0xac, 0x2d, 0xd5,
	0xd8, 0xe8, 0xed, 0x30, 0xfe, 0x07, 0x5b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xa3, 0x02,
	0x15, 0x95, 0x03, 0x00, 0x00,
}
